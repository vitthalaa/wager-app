// Code generated by mockery v2.12.2. DO NOT EDIT.

package handlers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	dto "github.com/vitthalaa/wager-app/dto"

	testing "testing"
)

// MockWagerService is an autogenerated mock type for the IWagerService type
type MockWagerService struct {
	mock.Mock
}

// ListWager provides a mock function with given fields: ctx, req
func (_m *MockWagerService) ListWager(ctx context.Context, req *dto.ListWagerRequest) ([]dto.Wager, error) {
	ret := _m.Called(ctx, req)

	var r0 []dto.Wager
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListWagerRequest) []dto.Wager); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.ListWagerRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceWager provides a mock function with given fields: ctx, req
func (_m *MockWagerService) PlaceWager(ctx context.Context, req *dto.PlaceWagerRequest) (*dto.Wager, error) {
	ret := _m.Called(ctx, req)

	var r0 *dto.Wager
	if rf, ok := ret.Get(0).(func(context.Context, *dto.PlaceWagerRequest) *dto.Wager); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.PlaceWagerRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockWagerService creates a new instance of MockWagerService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockWagerService(t testing.TB) *MockWagerService {
	mock := &MockWagerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
