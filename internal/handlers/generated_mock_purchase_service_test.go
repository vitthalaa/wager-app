// Code generated by mockery v2.12.2. DO NOT EDIT.

package handlers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dto "github.com/vitthalaa/wager-app/dto"

	testing "testing"
)

// MockPurchaseService is an autogenerated mock type for the IPurchaseService type
type MockPurchaseService struct {
	mock.Mock
}

// PurchaseWager provides a mock function with given fields: ctx, req
func (_m *MockPurchaseService) PurchaseWager(ctx context.Context, req *dto.BuyWagerRequest) (*dto.WagerPurchase, error) {
	ret := _m.Called(ctx, req)

	var r0 *dto.WagerPurchase
	if rf, ok := ret.Get(0).(func(context.Context, *dto.BuyWagerRequest) *dto.WagerPurchase); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.WagerPurchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.BuyWagerRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockPurchaseService creates a new instance of MockPurchaseService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPurchaseService(t testing.TB) *MockPurchaseService {
	mock := &MockPurchaseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
