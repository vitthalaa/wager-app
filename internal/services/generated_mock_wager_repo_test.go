// Code generated by mockery v2.12.2. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	repo "github.com/vitthalaa/wager-app/internal/repo"

	testing "testing"
)

// MockWagerRepo is an autogenerated mock type for the IWagerRepo type
type MockWagerRepo struct {
	mock.Mock
}

// CreateWager provides a mock function with given fields: ctx, wager
func (_m *MockWagerRepo) CreateWager(ctx context.Context, wager *repo.Wager) (*repo.Wager, error) {
	ret := _m.Called(ctx, wager)

	var r0 *repo.Wager
	if rf, ok := ret.Get(0).(func(context.Context, *repo.Wager) *repo.Wager); ok {
		r0 = rf(ctx, wager)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repo.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *repo.Wager) error); ok {
		r1 = rf(ctx, wager)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWagerByID provides a mock function with given fields: ctx, wagerID
func (_m *MockWagerRepo) GetWagerByID(ctx context.Context, wagerID uint32) (*repo.Wager, error) {
	ret := _m.Called(ctx, wagerID)

	var r0 *repo.Wager
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *repo.Wager); ok {
		r0 = rf(ctx, wagerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repo.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, wagerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWager provides a mock function with given fields: ctx, offset, limit
func (_m *MockWagerRepo) ListWager(ctx context.Context, offset uint32, limit uint32) ([]repo.Wager, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []repo.Wager
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) []repo.Wager); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWager provides a mock function with given fields: ctx, wager
func (_m *MockWagerRepo) UpdateWager(ctx context.Context, wager *repo.Wager) error {
	ret := _m.Called(ctx, wager)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *repo.Wager) error); ok {
		r0 = rf(ctx, wager)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockWagerRepo creates a new instance of MockWagerRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockWagerRepo(t testing.TB) *MockWagerRepo {
	mock := &MockWagerRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
